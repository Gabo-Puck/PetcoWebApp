#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var { Server } = require("socket.io");
var debug = require("debug")("petcowebapp-v1:server");
var http = require("http");
var { InMemorySessionStore } = require("../utils/socketUtils/SessionStore");
var { randomId } = require("../utils/cryptoUtils/randomId");
var sessionStore = new InMemorySessionStore();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
const io = new Server(server);

const wrap = (middleware) => (socket, next) =>
  middleware(socket.request, {}, next);

io.use(wrap(app.sessionReference));

io.use((socket, next) => {
  const sessionID = socket.handshake.auth.sessionID;
  if (sessionID) {
    const session = sessionStore.findSession(sessionID);
    if (session) {
      socket.sessionID = sessionID;
      socket.userID = session.userID;
      return next();
    }
  }
  if (socket.request.session.IdSession) {
    socket.sessionID = randomId();
    socket.userID = socket.request.session.IdSession;
    next();
  } else {
    return next(new Error("Usuario no logeado"));
  }
});

io.on("connection", (socket) => {
  sessionStore.saveSession(socket.sessionID, { userID: socket.userID });
  sessionStore.printSessions();
  socket.emit("session", {
    sessionID: socket.sessionID,
    userID: socket.userID,
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
